{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"textual-enhanced","text":""},{"location":"#introduction","title":"Introduction","text":"<p>This library is a mildly-opinionated set of enhancements and extras for the Textual framework, mainly aimed at how I like my own Textual apps to look and work. I've written this as a common set of tweaks I want for my own Textual apps. It might be useful for yours too.</p>"},{"location":"#style-choices","title":"Style choices","text":"<p>I tend to like the same style choices for all of my applications, this library implements the following:</p> <ul> <li>All vertical scrollbars are set to one character in width, by default (in   my applications I try really hard to avoid horizontal scrolling, so it's   nice to make scrollbars less obtrusive given I almost always only have   vertical bars).</li> <li>The icon on the left of the <code>Header</code> widget is   hidden.</li> <li>The ability to click to expand the <code>Header</code> is   disabled.</li> <li>the command palette is modified so that it doesn't take up the full width   of the screen (the full-width version makes it near-unreadable in wide   terminals and overall makes the command palette look like it's been   forgotten about).</li> <li>super+x is added as an alternative method of calling   the command palette (yes, I am an Emacs user, can you tell?).</li> <li>: is added as an alternative method of calling the command   palette (because I am nice to vi(m) users).</li> <li>The command palette's search icon is removed.</li> <li>The command palette's <code>background</code> is set to <code>$panel</code> by default.</li> </ul>"},{"location":"command_system/","title":"The Command System","text":"<p>TODO: My own approach to commands will be documented here.</p>"},{"location":"dialogs/","title":"Dialogs","text":"<p>TODO: The dialogs provided by this library will be documented here.</p>"},{"location":"library-contents/app/","title":"textual_enhanced.app","text":"<p>Tweaked base application class.</p>"},{"location":"library-contents/app/#textual_enhanced.app.EnhancedApp","title":"EnhancedApp","text":"<p>               Bases: <code>Generic[ReturnType]</code>, <code>App[ReturnType]</code></p> <p>The Textual App class  with some styling tweaks.</p> <p><code>EnhancedApp</code> adds no code changes, but it does implement a number of global styles that make a Textual app look just how I like. It also adds some extra default bindings for calling the command palette.</p>"},{"location":"library-contents/binding/","title":"textual_enhanced.binding","text":"<p>Provides an enhanced binding class.</p>"},{"location":"library-contents/binding/#textual_enhanced.binding.HelpfulBinding","title":"HelpfulBinding","text":"<p>               Bases: <code>Binding</code></p> <p>A binding that should show in the help screen.</p> <p>In many cases a binding will be associated with a <code>Command</code> and will show up in the help screen anyway. But sometimes there will be bindings that are particular to a widget that I want highlighted, that I want called out in the help screen. On the other hand I don't want all bindings to show in the help screen as that would end up being a cluttered and unhelpful mess.</p> <p>This class lets a binding be marked as helpful, destined for the help screen.</p>"},{"location":"library-contents/binding/#textual_enhanced.binding.HelpfulBinding.most_helpful_description","title":"most_helpful_description  <code>property</code>","text":"<pre><code>most_helpful_description\n</code></pre> <p>The most helpful description possible.</p>"},{"location":"library-contents/commands/","title":"textual_enhanced.commands","text":"<p>Provides code related to 'commands' in a Textual application.</p> <p>Provides helper code for dealing with bindings.</p>"},{"location":"library-contents/commands/#textual_enhanced.commands.CommandHits","title":"CommandHits  <code>module-attribute</code>","text":"<pre><code>CommandHits = Iterator[CommandHit | Command]\n</code></pre> <p>The result of looking for commands to make into hits.</p>"},{"location":"library-contents/commands/#textual_enhanced.commands.ChangeTheme","title":"ChangeTheme","text":"<p>               Bases: <code>Command</code></p> <p>Change the application's theme</p>"},{"location":"library-contents/commands/#textual_enhanced.commands.Command","title":"Command","text":"<p>               Bases: <code>Message</code></p> <p>Base class for all application command messages.</p>"},{"location":"library-contents/commands/#textual_enhanced.commands.Command.ACTION","title":"ACTION  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ACTION = None\n</code></pre> <p>The action to call when the command is executed.</p> <p>By default the action will be:</p> <p><code>action_{snake-case-of-command}_command</code></p> <p>There are some commands that will result in unhelpful snake-case names, and also times where you want the action method named in a better way; in such cases use <code>ACTION</code> to override the method name.</p>"},{"location":"library-contents/commands/#textual_enhanced.commands.Command.BINDING_KEY","title":"BINDING_KEY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BINDING_KEY = None\n</code></pre> <p>The binding key for the command.</p> <p>This can either be a string, which is the keys to bind, a tuple of the keys and also an overriding display value, or <code>None</code>.</p>"},{"location":"library-contents/commands/#textual_enhanced.commands.Command.COMMAND","title":"COMMAND  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>COMMAND = None\n</code></pre> <p>The text for the command.</p> Notes <p>If no <code>COMMAND</code> is provided the class name will be used.</p>"},{"location":"library-contents/commands/#textual_enhanced.commands.Command.FOOTER_TEXT","title":"FOOTER_TEXT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FOOTER_TEXT = None\n</code></pre> <p>The text to show in the footer.</p> Notes <p>If no <code>FOOTER_TEXT</code> is provided the <code>command</code> will be used.</p>"},{"location":"library-contents/commands/#textual_enhanced.commands.Command.SHOW_IN_FOOTER","title":"SHOW_IN_FOOTER  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SHOW_IN_FOOTER = False\n</code></pre> <p>Should the command be shown in the footer?</p> <p>By default commands are not shown in the footer, so set this to <code>True</code> to have the command appear there.</p>"},{"location":"library-contents/commands/#textual_enhanced.commands.Command.context_command","title":"context_command  <code>property</code>","text":"<pre><code>context_command\n</code></pre> <p>The command in context.</p>"},{"location":"library-contents/commands/#textual_enhanced.commands.Command.context_tooltip","title":"context_tooltip  <code>property</code>","text":"<pre><code>context_tooltip\n</code></pre> <p>The tooltip for the command, in context.</p>"},{"location":"library-contents/commands/#textual_enhanced.commands.Command.has_binding","title":"has_binding  <code>property</code>","text":"<pre><code>has_binding\n</code></pre> <p>Does this command have a binding?</p>"},{"location":"library-contents/commands/#textual_enhanced.commands.Command.action_name","title":"action_name  <code>classmethod</code>","text":"<pre><code>action_name()\n</code></pre> <p>Get the action name for the command.</p> <p>Returns:</p> Type Description <code>str</code> <p>The action name.</p>"},{"location":"library-contents/commands/#textual_enhanced.commands.Command.binding","title":"binding  <code>classmethod</code>","text":"<pre><code>binding()\n</code></pre> <p>Create a binding object for the command.</p> <p>Returns:</p> Type Description <code>Binding</code> <p>A <code>Binding</code> for the command's key bindings.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the command has no key binding.</p>"},{"location":"library-contents/commands/#textual_enhanced.commands.Command.bindings","title":"bindings  <code>staticmethod</code>","text":"<pre><code>bindings(*bindings)\n</code></pre> <p>Create bindings.</p> <p>Parameters:</p> Name Type Description Default <code>BindingType | type[Command]</code> <p>Normal Textual bindings or a command class.</p> <code>()</code> <p>Returns:</p> Type Description <code>list[BindingType]</code> <p>A list of bindings that can be used with <code>BINDINGS</code>.</p>"},{"location":"library-contents/commands/#textual_enhanced.commands.Command.bindings(bindings)","title":"<code>bindings</code>","text":""},{"location":"library-contents/commands/#textual_enhanced.commands.Command.command","title":"command  <code>classmethod</code>","text":"<pre><code>command()\n</code></pre> <p>The text for the command.</p> <p>Returns:</p> Type Description <code>str</code> <p>The command's textual name.</p>"},{"location":"library-contents/commands/#textual_enhanced.commands.Command.key_binding","title":"key_binding  <code>classmethod</code>","text":"<pre><code>key_binding()\n</code></pre> <p>Get the key that is the binding for this command.</p> <p>Returns:</p> Type Description <code>str</code> <p>The key that is bound, or <code>None</code> if there isn't one.</p> Notes <p>If a command has multiple bindings, only the first key is returned.</p>"},{"location":"library-contents/commands/#textual_enhanced.commands.Command.tooltip","title":"tooltip  <code>classmethod</code>","text":"<pre><code>tooltip()\n</code></pre> <p>The tooltip for the command.</p>"},{"location":"library-contents/commands/#textual_enhanced.commands.CommandHit","title":"CommandHit","text":"<p>               Bases: <code>NamedTuple</code></p> <p>A command hit for use in building a command palette hit.</p>"},{"location":"library-contents/commands/#textual_enhanced.commands.CommandHit.command","title":"command  <code>instance-attribute</code>","text":"<pre><code>command\n</code></pre> <p>The command.</p>"},{"location":"library-contents/commands/#textual_enhanced.commands.CommandHit.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description\n</code></pre> <p>The description of the command.</p>"},{"location":"library-contents/commands/#textual_enhanced.commands.CommandHit.message","title":"message  <code>instance-attribute</code>","text":"<pre><code>message\n</code></pre> <p>The message to emit when the command is chosen.</p>"},{"location":"library-contents/commands/#textual_enhanced.commands.CommandsProvider","title":"CommandsProvider","text":"<p>               Bases: <code>Provider</code></p> <p>A base class for command-message-oriented command palette commands.</p>"},{"location":"library-contents/commands/#textual_enhanced.commands.CommandsProvider.commands","title":"commands  <code>abstractmethod</code>","text":"<pre><code>commands()\n</code></pre> <p>Provide the command data for the command palette.</p> <p>Yields:</p> Type Description <code>CommandHits</code> <p>A tuple of the command, the command description and a command message.</p>"},{"location":"library-contents/commands/#textual_enhanced.commands.CommandsProvider.discover","title":"discover  <code>async</code>","text":"<pre><code>discover()\n</code></pre> <p>Handle a request to discover commands.</p> <p>Yields:</p> Type Description <code>Hits</code> <p>Command discovery hits for the command palette.</p>"},{"location":"library-contents/commands/#textual_enhanced.commands.CommandsProvider.maybe","title":"maybe","text":"<pre><code>maybe(command)\n</code></pre> <p>Yield a command if it's applicable.</p> <p>Parameters:</p> Name Type Description Default <code>type[Command]</code> <p>The type of the command to maybe yield.</p> required <p>Yields:</p> Type Description <code>CommandHits</code> <p>The command if it can be used right now.</p> <p>This method takes the command, looks at its <code>action_name</code> and uses Textual's <code>check_action</code> to see if the action can be performed right now. If it can it will <code>yield</code> an instance of the command, otherwise it does nothing.</p>"},{"location":"library-contents/commands/#textual_enhanced.commands.CommandsProvider.maybe(command)","title":"<code>command</code>","text":""},{"location":"library-contents/commands/#textual_enhanced.commands.CommandsProvider.prompt","title":"prompt  <code>classmethod</code>","text":"<pre><code>prompt()\n</code></pre> <p>The prompt for the command provider.</p>"},{"location":"library-contents/commands/#textual_enhanced.commands.CommandsProvider.search","title":"search  <code>async</code>","text":"<pre><code>search(query)\n</code></pre> <p>Handle a request to search for commands that match the query.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The query from the user.</p> required <p>Yields:</p> Type Description <code>Hits</code> <p>Command hits for the command palette.</p>"},{"location":"library-contents/commands/#textual_enhanced.commands.CommandsProvider.search(query)","title":"<code>query</code>","text":""},{"location":"library-contents/commands/#textual_enhanced.commands.CommonCommands","title":"CommonCommands","text":"<p>               Bases: <code>CommandsProvider</code></p> <p>Provides some common top-level commands for the application.</p>"},{"location":"library-contents/commands/#textual_enhanced.commands.CommonCommands.commands","title":"commands","text":"<pre><code>commands()\n</code></pre> <p>Provide the main application commands for the command palette.</p> <p>Yields:</p> Type Description <code>CommandHits</code> <p>The commands for the command palette.</p>"},{"location":"library-contents/commands/#textual_enhanced.commands.Help","title":"Help","text":"<p>               Bases: <code>Command</code></p> <p>Show help for and information about the application</p>"},{"location":"library-contents/commands/#textual_enhanced.commands.Quit","title":"Quit","text":"<p>               Bases: <code>Command</code></p> <p>Quit the application</p>"},{"location":"library-contents/commands/#textual_enhanced.commands.bindings.all_keys_for","title":"all_keys_for","text":"<pre><code>all_keys_for(node, source)\n</code></pre> <p>Get all the keys for the given command or binding.</p> <p>Parameters:</p> Name Type Description Default <code>DOMNode</code> <p>The node we're working from.</p> required <code>type[Command] | Binding</code> <p>The command or binding to get the keys for.</p> required <p>Yields:</p> Type Description <code>str</code> <p>The display names of all the keys for the command/binding.</p>"},{"location":"library-contents/commands/#textual_enhanced.commands.bindings.all_keys_for(node)","title":"<code>node</code>","text":""},{"location":"library-contents/commands/#textual_enhanced.commands.bindings.all_keys_for(source)","title":"<code>source</code>","text":""},{"location":"library-contents/commands/#textual_enhanced.commands.bindings.primary_key_for","title":"primary_key_for","text":"<pre><code>primary_key_for(node, source)\n</code></pre> <p>Get the primary key for the given command or binding.</p> <p>Parameters:</p> Name Type Description Default <code>DOMNode</code> <p>The node we're working from.</p> required <code>type[Command] | Binding</code> <p>The command or binding to get the keys for.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The display name of the primary key for the command/binding.</p>"},{"location":"library-contents/commands/#textual_enhanced.commands.bindings.primary_key_for(node)","title":"<code>node</code>","text":""},{"location":"library-contents/commands/#textual_enhanced.commands.bindings.primary_key_for(source)","title":"<code>source</code>","text":""},{"location":"library-contents/containers/","title":"textual_enhanced.containers","text":"<p>Provides enhanced container classes.</p>"},{"location":"library-contents/containers/#textual_enhanced.containers.EnhancedVerticalScroll","title":"EnhancedVerticalScroll","text":"<p>               Bases: <code>VerticalScroll</code></p> <p>A vertical scroll container with some enhancements.</p> <p>The main purpose of this class is to add some extra bindings for scrolling, and to add a couple more scrolling actions.</p>"},{"location":"library-contents/containers/#textual_enhanced.containers.EnhancedVerticalScroll.BINDINGS","title":"BINDINGS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BINDINGS = [\n    HelpfulBinding(\n        \"j, e, enter\",\n        \"scroll_down\",\n        tooltip=\"Scroll down one line\",\n    ),\n    HelpfulBinding(\n        \"k, y\", \"scroll_up\", tooltip=\"Scroll up one line\"\n    ),\n    HelpfulBinding(\n        \"f, space, z\",\n        \"page_down\",\n        tooltip=\"Scroll down one page\",\n    ),\n    HelpfulBinding(\n        \"b, w\", \"page_up\", tooltip=\"Scroll up one page\"\n    ),\n    HelpfulBinding(\n        \"shift+pageup, u\",\n        \"scroll_half_page(-1)\",\n        tooltip=\"Scroll up half a page\",\n    ),\n    HelpfulBinding(\n        \"shift+pagedown, d\",\n        \"scroll_half_page(1)\",\n        tooltip=\"Scroll down half a page\",\n    ),\n]\n</code></pre> <p>Additional movement bindings that might help vim/less users.</p>"},{"location":"library-contents/containers/#textual_enhanced.containers.EnhancedVerticalScroll.action_scroll_half_page","title":"action_scroll_half_page","text":"<pre><code>action_scroll_half_page(direction)\n</code></pre> <p>Scroll the view half a page in the given direction.</p> <p>Parameters:</p> Name Type Description Default <code>Literal[-1, 1]</code> <p>The direction to scroll in.</p> required"},{"location":"library-contents/containers/#textual_enhanced.containers.EnhancedVerticalScroll.action_scroll_half_page(direction)","title":"<code>direction</code>","text":""},{"location":"library-contents/dialogs/","title":"textual_enhanced.dialogs","text":"<p>Provides useful dialogs.</p>"},{"location":"library-contents/dialogs/#textual_enhanced.dialogs.Confirm","title":"Confirm","text":"<pre><code>Confirm(title, question, yes_text='Yes', no_text='No')\n</code></pre> <p>               Bases: <code>ModalScreen[bool]</code></p> <p>A modal dialog for confirming things.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The title for the dialog.</p> required <code>str</code> <p>The question to ask the user.</p> required <code>str</code> <p>The text for the yes button.</p> <code>'Yes'</code> <code>str</code> <p>The text for the no button.</p> <code>'No'</code>"},{"location":"library-contents/dialogs/#textual_enhanced.dialogs.Confirm(title)","title":"<code>title</code>","text":""},{"location":"library-contents/dialogs/#textual_enhanced.dialogs.Confirm(question)","title":"<code>question</code>","text":""},{"location":"library-contents/dialogs/#textual_enhanced.dialogs.Confirm(yes_text)","title":"<code>yes_text</code>","text":""},{"location":"library-contents/dialogs/#textual_enhanced.dialogs.Confirm(no_text)","title":"<code>no_text</code>","text":""},{"location":"library-contents/dialogs/#textual_enhanced.dialogs.Confirm.action_no","title":"action_no","text":"<pre><code>action_no()\n</code></pre> <p>Send back the negative response.</p>"},{"location":"library-contents/dialogs/#textual_enhanced.dialogs.Confirm.action_yes","title":"action_yes","text":"<pre><code>action_yes()\n</code></pre> <p>Send back the positive response.</p>"},{"location":"library-contents/dialogs/#textual_enhanced.dialogs.Confirm.compose","title":"compose","text":"<pre><code>compose()\n</code></pre> <p>Compose the layout of the dialog.</p>"},{"location":"library-contents/dialogs/#textual_enhanced.dialogs.HelpScreen","title":"HelpScreen","text":"<pre><code>HelpScreen(help_for=None)\n</code></pre> <p>               Bases: <code>ModalScreen[None]</code></p> <p>The help screen.</p> <p>Parameters:</p> Name Type Description Default <code>Screen[Any] | None</code> <p>The screen to show the help for.</p> <code>None</code>"},{"location":"library-contents/dialogs/#textual_enhanced.dialogs.HelpScreen(help_for)","title":"<code>help_for</code>","text":""},{"location":"library-contents/dialogs/#textual_enhanced.dialogs.HelpScreen.action_close","title":"action_close","text":"<pre><code>action_close()\n</code></pre> <p>Close the help screen.</p>"},{"location":"library-contents/dialogs/#textual_enhanced.dialogs.HelpScreen.compose","title":"compose","text":"<pre><code>compose()\n</code></pre> <p>Compose the layout of the help screen.</p>"},{"location":"library-contents/dialogs/#textual_enhanced.dialogs.HelpScreen.input_help","title":"input_help","text":"<pre><code>input_help(node)\n</code></pre> <p>Build help from the bindings and commands provided by a DOM node.</p> <p>Parameters:</p> Name Type Description Default <code>DOMNode</code> <p>The node that might provide commands.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The help text.</p>"},{"location":"library-contents/dialogs/#textual_enhanced.dialogs.HelpScreen.input_help(node)","title":"<code>node</code>","text":""},{"location":"library-contents/dialogs/#textual_enhanced.dialogs.HelpScreen.visit","title":"visit","text":"<pre><code>visit(event)\n</code></pre> <p>Visit any link clicked in the help.</p>"},{"location":"library-contents/dialogs/#textual_enhanced.dialogs.ModalInput","title":"ModalInput","text":"<pre><code>ModalInput(placeholder=None, initial='', classes=None)\n</code></pre> <p>               Bases: <code>ModalScreen[str | None]</code></p> <p>A modal screen to get input from the user.</p> <p>Parameters:</p> Name Type Description Default <code>str | None</code> <p>The placeholder text to use.</p> <code>None</code> <code>str</code> <p>The initial value for the input.</p> <code>''</code> <code>str | None</code> <p>The CSS classes of the modal input.</p> <code>None</code>"},{"location":"library-contents/dialogs/#textual_enhanced.dialogs.ModalInput(placeholder)","title":"<code>placeholder</code>","text":""},{"location":"library-contents/dialogs/#textual_enhanced.dialogs.ModalInput(initial)","title":"<code>initial</code>","text":""},{"location":"library-contents/dialogs/#textual_enhanced.dialogs.ModalInput(classes)","title":"<code>classes</code>","text":""},{"location":"library-contents/dialogs/#textual_enhanced.dialogs.ModalInput.action_escape","title":"action_escape","text":"<pre><code>action_escape()\n</code></pre> <p>Escape out without getting the input.</p>"},{"location":"library-contents/dialogs/#textual_enhanced.dialogs.ModalInput.compose","title":"compose","text":"<pre><code>compose()\n</code></pre> <p>Compose the input dialog.</p>"},{"location":"library-contents/dialogs/#textual_enhanced.dialogs.ModalInput.search","title":"search","text":"<pre><code>search()\n</code></pre> <p>Accept the input.</p>"},{"location":"library-contents/screen/","title":"textual_enhanced.screen","text":"<p>A Textual screen, with tweaks.</p>"},{"location":"library-contents/screen/#textual_enhanced.screen.EnhancedScreen","title":"EnhancedScreen","text":"<p>               Bases: <code>Generic[ScreenResultType]</code>, <code>Screen[ScreenResultType]</code></p> <p>A Textual screen with some extras.</p>"},{"location":"library-contents/screen/#textual_enhanced.screen.EnhancedScreen.action_change_theme_command","title":"action_change_theme_command","text":"<pre><code>action_change_theme_command()\n</code></pre> <p>Show the Textual theme picker command palette.</p>"},{"location":"library-contents/screen/#textual_enhanced.screen.EnhancedScreen.action_help_command","title":"action_help_command","text":"<pre><code>action_help_command()\n</code></pre> <p>Show the help screen.</p> <p>Rather than use Textual's own help facility, this shows my own help screen.</p>"},{"location":"library-contents/screen/#textual_enhanced.screen.EnhancedScreen.action_quit_command","title":"action_quit_command","text":"<pre><code>action_quit_command()\n</code></pre> <p>Quit the application.</p>"},{"location":"library-contents/screen/#textual_enhanced.screen.EnhancedScreen.show_palette","title":"show_palette","text":"<pre><code>show_palette(provider)\n</code></pre> <p>Show a particular command palette.</p> <p>Parameters:</p> Name Type Description Default <code>type[CommandsProvider]</code> <p>The commands provider for the palette.</p> required"},{"location":"library-contents/screen/#textual_enhanced.screen.EnhancedScreen.show_palette(provider)","title":"<code>provider</code>","text":""},{"location":"library-contents/tools/","title":"textual_enhanced.tools","text":"<p>Provides assorted tools that help with Textual things.</p>"},{"location":"library-contents/tools/#textual_enhanced.tools.add_key","title":"add_key","text":"<pre><code>add_key(label, key, context=None)\n</code></pre> <p>Add a key name to a label.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The label to add the key to.</p> required <code>str</code> <p>The display name of the key to add.</p> required <code>App[Any] | Widget | None</code> <p>The widget, screen or application.</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>The label with a display of the key added.</p> Notes <p>By default the key label will use the current theme's accent colour, if that can't be derived from the context them <code>dim</code> will be used.</p>"},{"location":"library-contents/tools/#textual_enhanced.tools.add_key(label)","title":"<code>label</code>","text":""},{"location":"library-contents/tools/#textual_enhanced.tools.add_key(key)","title":"<code>key</code>","text":""},{"location":"library-contents/tools/#textual_enhanced.tools.add_key(context)","title":"<code>context</code>","text":""},{"location":"library-contents/widgets/","title":"textual_enhanced.widgets","text":"<p>New or enhanced widgets.</p>"},{"location":"library-contents/widgets/#textual_enhanced.widgets.EnhancedOptionList","title":"EnhancedOptionList","text":"<p>               Bases: <code>OptionList</code></p> <p>The Textual <code>OptionList</code> with more features.</p> <p>Key changes are:</p> <ul> <li>By default some <code>vim</code>/<code>less</code>-user-friendly key bindings are added for   navigation.</li> <li><code>get_content_width</code>   works around a known Textual bug.</li> <li>Adds   <code>preserved_highlight</code>.</li> </ul>"},{"location":"library-contents/widgets/#textual_enhanced.widgets.EnhancedOptionList.preserved_highlight","title":"preserved_highlight  <code>property</code>","text":"<pre><code>preserved_highlight\n</code></pre> <p>Provides a context that preserves the highlight location.</p> <p>The rule for how this works is:</p> <ul> <li>If the highlighted option has an ID, an attempt will be made to   get back to that option;</li> <li>Failing the above an attempt will be made to return to the same   location in the list.</li> <li>If neither approach can be taken, and if there <code>OptionList</code> has   any content, the first option will be highlighted.</li> </ul> <p>The benefit of this is that the content of an <code>OptionList</code> can be cleared and built up again and, especially if your options have IDs, the user will be no wiser that such drastic measures were taken.</p> Example <pre><code>with self.query_one(EnhancedOptionList).preserved_highlight:\n    ...do things that modify the `OptionList`\n</code></pre>"},{"location":"library-contents/widgets/#textual_enhanced.widgets.EnhancedOptionList.get_content_width","title":"get_content_width","text":"<pre><code>get_content_width(container, viewport)\n</code></pre> <p>Workaround for textual#5489.</p> Note <p>textual#5489 has been fixed in later versions of Textual, but textual &gt;=2.0 still has some problems so I'm holding off using it for now.</p>"},{"location":"library-contents/widgets/#textual_enhanced.widgets.TextViewer","title":"TextViewer","text":"<pre><code>TextViewer(\n    text=\"\",\n    *,\n    name=None,\n    id=None,\n    classes=None,\n    disabled=False,\n)\n</code></pre> <p>               Bases: <code>TextArea</code></p> <p>A widget for viewing text.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> <p>The text to view.</p> <code>''</code> <code>str | None</code> <p>The name of the TextViewer.</p> <code>None</code> <code>str | None</code> <p>The ID of the TextViewer in the DOM.</p> <code>None</code> <code>str | None</code> <p>The CSS classes of the TextViewer.</p> <code>None</code> <code>bool</code> <p>Whether the TextViewer is disabled or not.</p> <code>False</code>"},{"location":"library-contents/widgets/#textual_enhanced.widgets.TextViewer(text)","title":"<code>text</code>","text":""},{"location":"library-contents/widgets/#textual_enhanced.widgets.TextViewer(name)","title":"<code>name</code>","text":""},{"location":"library-contents/widgets/#textual_enhanced.widgets.TextViewer(id)","title":"<code>id</code>","text":""},{"location":"library-contents/widgets/#textual_enhanced.widgets.TextViewer(classes)","title":"<code>classes</code>","text":""},{"location":"library-contents/widgets/#textual_enhanced.widgets.TextViewer(disabled)","title":"<code>disabled</code>","text":""},{"location":"library-contents/widgets/#textual_enhanced.widgets.TextViewer.action_copy","title":"action_copy","text":"<pre><code>action_copy()\n</code></pre> <p>Action for copying text to the clipboard.</p>"},{"location":"library-contents/widgets/#textual_enhanced.widgets.TextViewer.action_cursor_line_end","title":"action_cursor_line_end","text":"<pre><code>action_cursor_line_end(select=False)\n</code></pre> <p>Add a slightly smarter use of going 'end'.</p> <p>The rule with this version of going to the end is that if the cursor isn't at the end of the line, then the normal <code>TextArea</code> rules apply, otherwise if the cursor is at the end of the line the cursor will go to the end of the document.</p>"},{"location":"library-contents/widgets/#textual_enhanced.widgets.TextViewer.action_cursor_line_start","title":"action_cursor_line_start","text":"<pre><code>action_cursor_line_start(select=False)\n</code></pre> <p>Add a slightly smarter use of going 'home'.</p> <p>The rule with this version of going home is that if the cursor isn't at the start of the line, then the normal <code>TextArea</code> rules apply, otherwise if the cursor is at the start of the line the cursor will go to the start of the document.</p>"}]}